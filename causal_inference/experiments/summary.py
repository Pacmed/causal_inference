""" This module generates a summary of the results of an experiment.
"""

import numpy as np
import pandas as pd

def summary(df_results: pd.DataFrame,
            imported_from_r: bool=False,
            imported_from_cfr: bool=False):
    """
    Generates a pd.DataFrame with a summary of the experiment's results.

    Parameters
    ----------
    df_results : pd.DataFrame
        Results of an experiment. Results include metrics and treatment effects for each bootstrap sample.
    imported_from_r : bool
        If True, results of an experiment will be converted from R.
    imported_from_cfr : bool
        If True, results of an experiment will be converted from Python 2.

    Returns
    -------
    df_summary : pd.DataFrame
        Returns a summary of the experiment's results.
    """

    # Convert results
    if imported_from_r:
        df_results = convert_results_r(df_results)

    if imported_from_cfr:
        df_results = convert_results_cfr(df_results)

    # Initialize the summary
    df_summary = pd.DataFrame(data=[])

    # For each metric (error metric or treatment effect) generate the summary (mean + 95% CI)
    for metric in df_results:
        summary = [np.mean(df_results[metric]),
                   np.percentile(df_results[metric], q=2.5, interpolation='higher'),
                   np.percentile(df_results[metric], q=97.5, interpolation='lower')]
        df_summary[metric] = summary

    df_summary = df_summary.T.round(2)
    df_summary.columns = ['mean', 'CI_start', 'CI_end']

    return df_summary


def convert_results_r():
    pass

def convert_results_cfr(load_path:str, save_path:str):
    """Converts results generated by the CfR library into the correct format.

    Parameters
    ----------
    load_path : str
        A path to the results of the CfR package stored in the 'evaluation.npz' file.
    save_path : str
        A path to the results consistent with the experiments generated with the causal_inference package.

    Returns
    -------
    df_results : pd.DataFrame
        Results of an experiment.
    """

    # Load results generated with CfR
    results = np.load(load_path, encoding='bytes', allow_pickle=True)[0]

    # Load number of iterations for which the model was run
    n_of_iterations = results[b'valid'][b'pehe_nn'].shape[1]

    # Initialize results
    early_stop = []
    ate_train, rmse_train, r2_train, ate_test, rmse_test, r2_test = [], [], [], [], [], []

    for iteration in range(n_of_iterations):
        # Load the early stopping criterion
        stop = np.argmin(results[b'valid'][b'pehe_nn'][0, iteration, :], axis=0)
        early_stop.append(stop)

        # Load corresponding results
        rmse_train.append(results[b'train'][b'rmse_fact'][0, iteration, stop])
        rmse_test.append(results[b'test'][b'rmse_fact'][0, iteration, stop])

        r2_train.append(results[b'train'][b'pehe'][0, iteration, stop])  # The source code of CfR was modified to store
        r2_test.append(results[b'test'][b'pehe'][0, iteration, stop])    # the R^2 coefficient in the 'pehe' column.

        ate_train.append(results[b'train'][b'ate_pred'][0, iteration, stop])
        ate_test.append(results[b'test'][b'ate_pred'][0, iteration, stop])


    # Save results
    results = {'rmse_train': rmse_train, 'r2_train': r2_train, 'ate_train': ate_train,
               'rmse_test': rmse_test, 'r2_test': r2_test, 'ate_test': ate_test}
    df_results = pd.DataFrame(results)

    df_results.to_csv(save_path)

    return df_results




